<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-us">

  <author>
    <name>Mislav Marohnić</name>
    <uri>http://mislav.uniqpath.com/about</uri>
    <email>mislav.marohnic@gmail.com</email>
  </author>

  <title type="text">No Strings Attached ~ Rails</title>
<subtitle>On Rails by Mislav Marohnić</subtitle>

<link rel="self" href="http://mislav.uniqpath.com/feeds/rails.xml" />
<link rel="alternate" type="text/html" href="http://mislav.uniqpath.com/rails/" />

<id>http://mislav.caboo.se/rails/</id>

<category term="rails" label="Ruby on Rails" />


  <updated>2009-02-12T19:56:24Z</updated>


  <entry>
    <author><name>Mislav</name></author>
    <published>2009-02-12T14:56:24Z</published>
    <updated>2009-02-12T19:56:24Z</updated>
    <title>The power of naming conventions</title>
    <link rel="alternate" type="text/html" href="http://mislav.uniqpath.com/rails/the-power-of-naming-conventions/" />
    <id>http://mislav.caboo.se/rails/the-power-of-naming-conventions/</id>
    <content type="html">
      &lt;p&gt;Ruby developers are very sensitive to naming things. There are strong conventions regarding class, variable, method and file names, and these are not just organizational or cosmetic &amp;#8211; some have their semantics even during code execution. For instance: in Rails a model named &amp;#8220;Person&amp;#8221; is implicitly tied to the &amp;#8220;people&amp;#8221; table in the database just by name inspection.&lt;/p&gt;

&lt;p&gt;In our recent project we&amp;#8217;ve been building lots of our application logic around naming. Today I was editing some code and have been blown away realizing how deep we actually went with this over time.&lt;/p&gt;
      &lt;p&gt;Take a look at this single line of code from one of our main Haml templates:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;= thumbnails_box &quot;Top contributors&quot;, :expires_in =&amp;gt; 30.minutes, :link =&amp;gt; true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This renders a generic &amp;#8220;thumbnails box&amp;#8221; view partial populated with avatars and names of several of our top contributors. What isn&amp;#8217;t obvious here is just how much this single line knows:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;the text of the &lt;code&gt;H2&lt;/code&gt; &lt;strong&gt;title&lt;/strong&gt; for the box is set to &amp;#8220;Top contributors&amp;#8221;;&lt;/li&gt;
&lt;li&gt;the &lt;strong&gt;ID of the DIV&lt;/strong&gt; that represents this box is set to &amp;#8220;top_contributors&amp;#8221;;&lt;/li&gt;
&lt;li&gt;&amp;#8220;top_contributors&amp;#8221; suffix is &lt;strong&gt;used in caching&lt;/strong&gt; to differentiate between other fragment caches on this page;&lt;/li&gt;
&lt;li&gt;the box title is also &lt;strong&gt;a link&lt;/strong&gt; to &lt;code&gt;top_contributors_path&lt;/code&gt; named route (triggered by &lt;code&gt;:link =&amp;gt; true&lt;/code&gt;);&lt;/li&gt;
&lt;li&gt;the data to populate the box is found in the &lt;code&gt;@top_contributors&lt;/code&gt; &lt;strong&gt;instance variable&lt;/strong&gt;;&lt;/li&gt;
&lt;li&gt;the &lt;code&gt;@top_contributors&lt;/code&gt; variable is created in the controller by paginating the &lt;code&gt;top_contributors&lt;/code&gt; &lt;strong&gt;named scope&lt;/strong&gt; of our models;&lt;/li&gt;
&lt;li&gt;thumbnails are &lt;strong&gt;paginated&lt;/strong&gt; with the &lt;code&gt;top_contributors_page&lt;/code&gt; parameter to differentiate between other paginated collections on this page;&lt;/li&gt;
&lt;li&gt;Ajax pagination is done with &lt;strong&gt;event delegation&lt;/strong&gt; that pays attention to the ID of the DIV it originated from (in this case &amp;#8220;top_contributors&amp;#8221;).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you read the above carefully, you have noticed that a single string &amp;#8220;Top contributors&amp;#8221; &amp;#8211; that started off as a HTML title &amp;#8211; went full-stack: from models to controllers, view templates, caching logic and even JavaScript. All by the power of naming.&lt;/p&gt;

&lt;p&gt;One line of Ruby code = one idea. Still, this proves there&amp;#8217;s no limit on how sophisticated that idea might be.&lt;/p&gt;
    </content>
  </entry>

  <entry>
    <author><name>Mislav</name></author>
    <published>2008-10-16T13:33:48Z</published>
    <updated>2008-10-16T17:33:48Z</updated>
    <title>Haxor backdoor in development</title>
    <link rel="alternate" type="text/html" href="http://mislav.uniqpath.com/rails/haxor-backdoor-in-development/" />
    <id>http://mislav.caboo.se/rails/haxor-backdoor-in-development/</id>
    <content type="html">
      &lt;p&gt;I&amp;#8217;m tired of logging in to my application in development mode. It&amp;#8217;s on my local machine, so it doesn&amp;#8217;t have to be secure, anyway. Wouldn&amp;#8217;t it be great if the app would automatically authenticate me in when I click on &amp;#8220;Sign in&amp;#8221;?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;class SessionsController &amp;lt; ApplicationController

  before_filter :haxor_backdoor, :only =&amp;gt; :new

  # ...

  protected

    def haxor_backdoor
      if Rails.env.development?
        email = `git config --global user.email`.chomp
        self.current_user = User.find_by_email(email)
        redirect_to(:back) if logged_in?
      end
    end

end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will work if you have git setup and if you&amp;#8217;re using restful authentication, or any other authentication scheme that provides the &lt;code&gt;current_user&lt;/code&gt; setter and a &lt;code&gt;logged_in?&lt;/code&gt; helper.&lt;/p&gt;
      
    </content>
  </entry>

  <entry>
    <author><name>Mislav</name></author>
    <published>2008-09-17T16:20:26Z</published>
    <updated>2008-09-22T17:49:31Z</updated>
    <title>Branching the database along with your code</title>
    <link rel="alternate" type="text/html" href="http://mislav.uniqpath.com/rails/branching-the-database-along-with-your-code/" />
    <id>http://mislav.caboo.se/rails/branching-the-database-along-with-your-code/</id>
    <content type="html">
      &lt;p&gt;If you&amp;#8217;re doing all your development on the &amp;#8220;master&amp;#8221; branch, you&amp;#8217;re not using git. It&amp;#8217;s fine to stick to master if you&amp;#8217;re only learning git, but soon you&amp;#8217;ll have to dive into non-linear development. Branches have many uses, depending on the engineering methodology your team practices, but the most common are:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Personal branches to develop a single feature or fix a bug before the changes are ready to be merged to master and pushed upstream;&lt;/li&gt;
&lt;li&gt;Shared feature branches for experimental features so everybody can try them out and contribute;&lt;/li&gt;
&lt;li&gt;Version branches for stable versions of the software, which later receive bug fixes picked from the mainline branch (master).&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;But, when your application uses a database, sometimes you&amp;#8217;ll run into the problem of your code rapidly changing when you switch between branches while your database schema stays the same, thus breaking your application in development. Not fun at all.&lt;/p&gt;

&lt;p&gt;Today I got tired of this and hacked up a way to remedy it.&lt;/p&gt;
      &lt;h2 id=&quot;problem&quot;&gt;&amp;#8220;Branch like a tree&amp;#8221;&lt;/h2&gt;

&lt;p&gt;Here&amp;#8217;s a simple demonstration of the problem. Imagine that your job today is to replace the old, plain-text way of storing passwords in the database with a new one that stores salted, encrypted passwords.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Start off a new branch: &lt;code&gt;git checkout -b authentication&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Make a migration that replaces the old &amp;#8220;password&amp;#8221; field with &amp;#8220;salt&amp;#8221; and &amp;#8220;crypted_password&amp;#8221; and migrates existing passwords.&lt;/li&gt;
&lt;li&gt;Adjust the User model code: make a callback that generates a random salt for new users, handle hashing of passwords on every password update.&lt;/li&gt;
&lt;li&gt;Migrate the database.&lt;/li&gt;
&lt;li&gt;Write tests for this new functionality.&lt;/li&gt;
&lt;li&gt;After you&amp;#8217;ve commited everything, get back to the mainstream branch (&lt;code&gt;git checkout master&lt;/code&gt;) to pull and check on something your coworkers have been doing in the meantime.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;BOOM!&lt;/strong&gt; Discover that login is broken locally because of the changes to database schema you&amp;#8217;ve just done.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;It&amp;#8217;s easy to forget that, when you switched back to master, the mainstream code still expects to query the database by the &amp;#8220;password&amp;#8221; field. Now you have to undo your migration in order to work on master for a while. When you get back to &amp;#8220;authentication&amp;#8221; branch, you have to migrate up again &amp;#8230; and this quickly ruins your day.&lt;/p&gt;

&lt;h2 id=&quot;solution&quot;&gt;Take the database schema along for the ride&lt;/h2&gt;

&lt;p&gt;So what if we can &amp;#8220;branch&amp;#8221; the database together with our code?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;# start a new feature:
$ git checkout -b authentication

# mark that the branch should have its own database:
$ git config branch.authentication.database true

# branch the database (I'm using a Thor task for MySQL)
$ thor git:db:clone

# Now my app is switched to a new database called
# &quot;myapp_development_authentication&quot;. I can make changes
# to its schema, because when I check out master I'm
# magically back on &quot;myapp_development&quot; again.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I found all this trivial to implement by subclassing Rails::Configuration and adding a bit of logic to the method that retrieves database configuration from &amp;#8220;config/database.yml&amp;#8221;. Simply make this tweak to your &amp;#8220;environment.rb&amp;#8221;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;# Bootstrap the Rails environment, frameworks, and default configuration
require File.join(File.dirname(__FILE__), 'boot')
require 'git_conf'

Rails::Initializer.run(:process, GitConf.new) do |config|
  # ...
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Note: this solution is not tested with Rails versions prior to &lt;strong&gt;2.1.1&lt;/strong&gt; and therefore might not work.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;You can find &lt;a href=&quot;http://gist.github.com/11264&quot;&gt;full code for &lt;strong&gt;GitConf&lt;/strong&gt; (and the Thor task for MySQL) on this gist&lt;/a&gt;. Main functionality requires Grit (&amp;#8220;mojombo-grit&amp;#8221; gem from GitHub) to inspect the repository and Thor (&amp;#8220;wycats-thor&amp;#8221;) for the clone task.&lt;/p&gt;

&lt;h2 id=&quot;rebasing&quot;&gt;Rebasing and merging&lt;/h2&gt;

&lt;p&gt;The code above also allows for two concepts tightly related to branching: rebasing and merging. Turns out rebasing your branch is fairly easy:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;$ git checkout master
$ git pull
$ git checkout authentication
$ git rebase master

# clone &quot;myapp_development&quot; into &quot;myapp_development_authentication&quot; again:
$ thor git:db:clone --force
$ rake db:migrate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This destroys the data you may have entered while working on the &amp;#8220;authentication&amp;#8221; branch, but we&amp;#8217;re in development anyway.&lt;/p&gt;

&lt;p&gt;Now, when you&amp;#8217;re ready to merge changes from &amp;#8220;authentication&amp;#8221; to &amp;#8220;master&amp;#8221; of course there is no way to merge &amp;#8220;myapp_development_authentication&amp;#8221; database into &amp;#8220;myapp_development&amp;#8221;, but you only need the schema changes, right?&lt;/p&gt;

&lt;p&gt;Rails 2.1 features &lt;em&gt;timestamped migrations&lt;/em&gt; which are very convenient for non-linear development. Simply &lt;code&gt;git merge authentication&lt;/code&gt; while on the master branch and run &lt;code&gt;rake db:migrate&lt;/code&gt;. Rails will figure out what migrations have come from the merged branch and run them to bring you to the latest state of your database schema.&lt;/p&gt;
    </content>
  </entry>

  <entry>
    <author><name>Mislav</name></author>
    <published>2008-08-31T16:34:40Z</published>
    <updated>2008-09-22T17:44:43Z</updated>
    <title>Validations in any class</title>
    <link rel="alternate" type="text/html" href="http://mislav.uniqpath.com/rails/validations-in-any-class/" />
    <id>http://mislav.caboo.se/rails/validations-in-any-class/</id>
    <content type="html">
      &lt;p&gt;Sometimes you don&amp;#8217;t need database persistence for your models. Ryan Bates describes this as &lt;a href=&quot;http://railscasts.com/episodes/121-non-active-record-model&quot;&gt;the non-ActiveRecord model&lt;/a&gt; in his screencasts.&lt;/p&gt;

&lt;p&gt;What if you need &lt;em&gt;validations&lt;/em&gt;? I&amp;#8217;ve tried it, thinking that I only need to mix-in &lt;a href=&quot;http://api.rubyonrails.org/classes/ActiveRecord/Validations.html&quot;&gt;ActiveRecord::Validations&lt;/a&gt; module:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;ruby error&quot;&gt;class Person
  attr_accessor :name, :age
  include ActiveRecord::Validations
  validates_presence_of :name
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It turned out this doesn&amp;#8217;t work. The Validations module expects our class to look like an ActiveRecord::Base subclass&amp;#8212;at least to &lt;em&gt;some&lt;/em&gt; extent. But, with a few methods more, we can easily make this happen.&lt;/p&gt;
      &lt;h2 id=&quot;working-code&quot;&gt;The working code&lt;/h2&gt;

&lt;p&gt;At &lt;code&gt;include&lt;/code&gt; time, the Validations module of Rails 2.1 expects these methods to be defined:&lt;br&gt;&lt;code&gt;save&lt;/code&gt;, &lt;code&gt;save!&lt;/code&gt;, &lt;code&gt;update_attribute&lt;/code&gt; and &lt;code&gt;new_record?&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here is the code for a minimal model that uses validations:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;class Person
  attr_accessor :name, :age

  def initialize(attrs = {})
    for key, value in attrs
      update_attribute(key, value)
    end
    @new_record = true
  end

  def save
    # your saving logic goes here
    # ...
    @new_record = false
    return true # if saving was a success
  end

  alias :save! :save

  def update_attribute(key, value)
    send &quot;#{key}=&quot;, value
  end

  def new_record?() @new_record; end

  # the fun part:
  include ActiveRecord::Validations
  validates_presence_of :name
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This class definition doesn&amp;#8217;t raise errors. Let&amp;#8217;s try it out:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;irb&quot;&gt;&amp;gt;&amp;gt; me = Person.new :age =&amp;gt; 24
=&amp;gt; #&amp;lt;Person:0x212f5a0 @new_record=true, @age=23&amp;gt;
&amp;gt;&amp;gt; me.save
=&amp;gt; false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Success! Validations refused to save the instance because the &lt;code&gt;name&lt;/code&gt; attribute is missing:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt; me.name = &quot;Mislav&quot;
=&amp;gt; &quot;Mislav&quot;
&amp;gt;&amp;gt; me.save
=&amp;gt; true
&amp;gt;&amp;gt; me.new_record?
=&amp;gt; false
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course, we can inspect the validation error messages in a way identical to doing it in ActiveRecord. Your custom view helpers for displaying validation errors should continue working without modifications.&lt;/p&gt;
    </content>
  </entry>

  <entry>
    <author><name>Mislav</name></author>
    <published>2008-06-05T05:59:01Z</published>
    <updated>2008-09-22T17:43:27Z</updated>
    <title>An excercise in cross-site request forgery</title>
    <link rel="alternate" type="text/html" href="http://mislav.uniqpath.com/rails/excercise-in-csrf/" />
    <id>http://mislav.caboo.se/rails/excercise-in-csrf/</id>
    <content type="html">
      &lt;p&gt;If you are reading this on my blog and are logged in the &lt;a href=&quot;http://workingwithrails.com/&quot;&gt;Working With Rails&lt;/a&gt; community site, you just recommended &lt;a href=&quot;http://workingwithrails.com/person/2764-mislav-marohni&quot;&gt;me as a Rails developer&lt;/a&gt;&amp;#8212;without even knowing it. &lt;ins&gt;&lt;b&gt;Update:&lt;/b&gt; Of course, by now they have fixed it and the hack does no longer work. Or does it? Hop to the bottom of this article for more info.&lt;/ins&gt;&lt;/p&gt;

&lt;p&gt;Yes, this is a hack, and yes&amp;#8212;it is pretty sneaky. This vulnerability in web applications is exploited by something called &lt;strong&gt;cross-site request forgery&lt;/strong&gt; (&lt;em&gt;CSRF&lt;/em&gt; in short). In simple terms, one site (the attacker; me in this case) forges an HTTP request to another site to do a certain action in visitor&amp;#8217;s behalf.&lt;/p&gt;
      &lt;h2 id=&quot;how&quot;&gt;How it was done&lt;/h2&gt;

&lt;p&gt;For this hack, all that it took was putting this hidden iframe somewhere on my blog:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;&amp;lt;iframe
  src=&quot;http://workingwithrails.com/recommendation/create?recommendation[for_person_id]=2764&amp;amp;recommendation[have_read_blog]=1&quot;
  width=&quot;1&quot; height=&quot;1&quot; frameborder=&quot;0&quot;&amp;gt;&amp;lt;/iframe&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;#8217;s pretty clear what this does. It loads an external page in the iframe, the page being exactly the one that accepts POST data from a recommendation form on the Working With Rails site. The security hole is, this page does exactly the same action for GET requests with parameters in the URL! Because of this, it was easy to forge the request in the iframe.&lt;/p&gt;

&lt;p&gt;This hack is brought to you courtesy of &lt;a href=&quot;http://m.onkey.org/&quot;&gt;Pratik Naik&lt;/a&gt;, who entertained my idea of WWR being vulnerable to CSRF long enough to actually bother trying requesting the above URL. Instead of the site refusing the connection to him, it responded with HTTP 500 status, which clearly indicated that it accepts GET requests but that we have to pass in correct parameters. The result of our hacking is the iframe you see above.&lt;/p&gt;

&lt;p&gt;Did the hack work? Well, in less than 24 hours I&amp;#8217;ve got enough recommendations to boost my raking by 10 places up. See for yourself:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/page_attachments/0000/0043/mislav-popularity.jpg&quot; style=&quot;display:block; margin:1em auto&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;prevention&quot;&gt;Preventing CSRF in your application&lt;/h2&gt;

&lt;p&gt;It&amp;#8217;s easy to prevent this when you&amp;#8217;re using Rails 2. Make sure you have &lt;code&gt;protect_from_forgery&lt;/code&gt; call in your ApplicationController:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;class ApplicationController &amp;lt; ActionController::Base
  protect_from_forgery
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This protects all POST, PUT and DELETE actions by checking for the presence of a specific token that&amp;#8217;s dependent on the user&amp;#8217;s session. The token is injected in all forms on your site if you&amp;#8217;re using Rails&amp;#8217; form helpers like &lt;code&gt;form_for&lt;/code&gt; and &lt;code&gt;form_tag&lt;/code&gt;. If you&amp;#8217;re manually doing an Ajax POST request, you&amp;#8217;ll have to include the &amp;#8220;authenticity_token&amp;#8221; parameter which has the value of what &lt;code&gt;form_authenticity_token&lt;/code&gt; method returns. This is how I put it in a global variable in the view:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;rhtml&quot;&gt;&amp;lt;%= javascript_tag &quot;_token = '#{form_authenticity_token}'&quot; %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now I can use the &amp;#8220;_token&amp;#8221; value in my scripts to make Ajax POST requests.&lt;/p&gt;

&lt;p&gt;What about GET requests? They are not protected with this mechanism for a reason&amp;#8212;GET requests shouldn&amp;#8217;t change any state or data in your application. If you have some controller action that does something to your data, make sure it&amp;#8217;s &lt;em&gt;not&lt;/em&gt; accessible with the GET method.&lt;/p&gt;

&lt;p&gt;This is already taken care by Rails&amp;#8217; RESTful routing mechanism. The &amp;#8220;create&amp;#8221;, &amp;#8220;update&amp;#8221;, and &amp;#8220;destroy&amp;#8221; actions aren&amp;#8217;t accessible over GET.&lt;/p&gt;

&lt;p&gt;Now all is well. You can relax.&lt;/p&gt;

&lt;h2 id=&quot;more&quot;&gt;More&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.eribium.org/&quot;&gt;Alex MacCaw&lt;/a&gt; wrote &lt;a href=&quot;http://www.eribium.org/blog/?p=189&quot;&gt;a follow-up on how he continued to hack their site&lt;/a&gt; even after they prevented GET requests for creating recommendations. He uses JavaScript to submit a dynamic form in a hidden iframe.&lt;/p&gt;
    </content>
  </entry>

  <entry>
    <author><name>Mislav</name></author>
    <published>2008-05-24T12:13:54Z</published>
    <updated>2008-09-22T17:45:23Z</updated>
    <title>Use HTML 4 in your application</title>
    <link rel="alternate" type="text/html" href="http://mislav.uniqpath.com/rails/cargo-culting-xhtml-considered-harmful/" />
    <id>http://mislav.caboo.se/rails/cargo-culting-xhtml-considered-harmful/</id>
    <content type="html">
      &lt;p&gt;When you set up an application, Rails outputs XHTML by default.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.b-list.org/weblog/2008/jun/18/html/&quot; title=&quot;Why HTML&quot;&gt;It is no secret&lt;/a&gt; that &lt;a href=&quot;http://hixie.ch/advocacy/xhtml&quot;&gt;sending XHTML as text/html MIME type is bad&lt;/a&gt;. XHTML output has been opposed numerous times on the &lt;a href=&quot;http://groups.google.com/group/rubyonrails-core&quot; title=&quot;Ruby on Rails core Google Group&quot;&gt;Rails core mailing list&lt;/a&gt;, but the complaints have been falling on deaf ears. Rails wants to be cool and that&amp;#8217;s why they want to use technologies that seem most hip.&lt;/p&gt;

&lt;p&gt;But, using XHTML in your app is as hip as sawing off the roof of your &lt;a href=&quot;http://www.time.com/time/specials/2007/article/0,28804,1658545_1658533_1658529,00.html&quot; title=&quot;1985 Yugo GV among the worst 50 cars of all time&quot;&gt;1985 Yugo&lt;/a&gt; and pretending it&amp;#8217;s a Cadillac.&lt;/p&gt;
      &lt;p&gt;That&amp;#8217;s why &lt;a href=&quot;http://nex-3.com/posts/76-haml-2-0&quot;&gt;Haml 2.0&lt;/a&gt; supports HTML 4 output. Here is how you can enable it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;ruby&quot;&gt;Haml::Template::options[:format] = :html4

module StandardistaHelper
  # override tag helper from Rails to disable self-closing tags
  # (there is no such thing in HTML)
  def tag(name, options = nil, open = false, escape = true)
    &quot;&amp;lt;#{name}#{tag_options(options, escape) if options}&amp;gt;&quot;
  end
end

ActionView::Base.send :include, StandardistaHelper
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, instead of sticking this in your environment.rb, you can install the &lt;a href=&quot;http://github.com/mislav/standardista/tree/master&quot;&gt;Standardista plugin&lt;/a&gt; I just released. You only need Haml 2 included in your app (I prefer using the gem). &lt;a href=&quot;http://github.com/mislav/standardista/tree/master/lib/standardista.rb&quot;&gt;View the source&lt;/a&gt; to see what Standardista does (it&amp;#8217;s simple and smart).&lt;/p&gt;

&lt;p&gt;Test it with a Haml layout like this one:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;haml&quot;&gt;!!! strict
%html
  %head
    %title Standardista test
    %meta{ :content =&amp;gt; &quot;text/html; charset=utf-8&quot;, &quot;http-equiv&quot; =&amp;gt; &quot;Content-type&quot; }
    = stylesheet_link_tag 'application'
  %body
    = yield
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The result should:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;have HTML 4.01 Strict DOCTYPE;&lt;/li&gt;
&lt;li&gt;not render self-closing tags for META, LINK, IMG, BR (and such) elements.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In production, your HTML and CSS will also be smaller (have less whitespace) and therefore load quicker.&lt;/p&gt;

&lt;p&gt;The other benefit is that I will love you more. &lt;span style=&quot;font-size:1.5em; color: firebrick&quot;&gt;♥&lt;/span&gt;&lt;/p&gt;
    </content>
  </entry>



</feed>
