<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-us">

  <author>
    <name>Mislav Marohnić</name>
    <uri>http://mislav.uniqpath.com/about</uri>
    <email>mislav.marohnic@gmail.com</email>
  </author>

  <title type="text">No Strings Attached ~ JavaScript</title>
<subtitle>On JavaScript by Mislav Marohnić</subtitle>

<link rel="self" href="http://mislav.uniqpath.com/feeds/js.xml" />
<link rel="alternate" type="text/html" href="http://mislav.uniqpath.com/js/" />

<id>http://mislav.caboo.se/js/</id>

<category term="javascript" label="JavaScript" />


  <updated>2008-10-16T20:11:06Z</updated>


  <entry>
    <author><name>Mislav</name></author>
    <published>2008-10-16T16:11:06Z</published>
    <updated>2008-10-16T20:11:06Z</updated>
    <title>C is for cookie</title>
    <link rel="alternate" type="text/html" href="http://mislav.uniqpath.com/js/c-is-for-cookie/" />
    <id>http://mislav.caboo.se/js/c-is-for-cookie/</id>
    <content type="html">
      &lt;p&gt;Getting and setting cookies in JavaScript through the standard API (&lt;code&gt;document.cookie&lt;/code&gt;) can be a pain to do manually, so I&amp;#8217;m sharing a tiny, framework-independent script that provides both read and write methods with the simplest interface there can be.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;// setting a cookie:
Cookie.set('SesameStreetCharacter', 'Cookie monster')

// getting a value of the cookie:
Cookie.get('SesameStreetCharacter')
// -&amp;gt; 'Cookie monster'

// Cookie.set() optional parameters
var date = new Date()
date.setTime(date.getTime() + (14*24*60*60*1000)) // 14 days from now

Cookie.set('expiringCookie', 'I will expire', {
  expires: date, path: '/some/path', domain: 'example.com', secure: true
})
&lt;/code&gt;&lt;/pre&gt;
      &lt;p&gt;Here&amp;#8217;s the full code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// C IS FOR COOKIE
var Cookie = {
  get: function(name) {
    var name = escape(name) + '='
    if (document.cookie.indexOf(name) &amp;gt;= 0) {
      var cookies = document.cookie.split(/\s*;\s*/)
      for (var i = 0; i &amp;lt; cookies.length; i++) {
        if (cookies[i].indexOf(name) == 0)
          return unescape(cookies[i].substring(name.length, cookies[i].length))
      }
    }
    return null
  },

  set: function(name, value, options) {
    var newcookie = [escape(name) + &quot;=&quot; + escape(value)]
    if (options) {
      if (options.expires) newcookie.push(&quot;expires=&quot; + options.expires.toGMTString())
      if (options.path)    newcookie.push(&quot;path=&quot; + options.path)
      if (options.domain)  newcookie.push(&quot;domain=&quot; + options.domain)
      if (options.secure)  newcookie.push(&quot;secure&quot;)
    }
    document.cookie = newcookie.join('; ')
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And a great video to go along:&lt;/p&gt;

&lt;p&gt;&lt;object width=&quot;425&quot; height=&quot;349&quot;&gt;&lt;param name=&quot;movie&quot; value=&quot;http://www.youtube.com/v/BovQyphS8kA&amp;amp;hl=en&amp;amp;fs=1&amp;amp;rel=0&amp;amp;border=1&quot;&gt;&lt;/param&gt;&lt;param name=&quot;allowFullScreen&quot; value=&quot;true&quot;&gt;&lt;/param&gt;&lt;embed src=&quot;http://www.youtube.com/v/BovQyphS8kA&amp;amp;hl=en&amp;amp;fs=1&amp;amp;rel=0&amp;amp;border=1&quot; type=&quot;application/x-shockwave-flash&quot; allowfullscreen=&quot;true&quot; width=&quot;425&quot; height=&quot;349&quot;&gt;&lt;/embed&gt;&lt;/object&gt;&lt;/p&gt;

&lt;h2 id=&quot;related-reading&quot;&gt;Related reading&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://www.quirksmode.org/js/cookies.html&quot;&gt;JavaScript cookies on Quirksmode&lt;/a&gt; &amp;#8211; everything you wanted to know about browser cookies, by Peter-Paul Koch&lt;/li&gt;
&lt;/ol&gt;
    </content>
  </entry>

  <entry>
    <author><name>Mislav</name></author>
    <published>2008-05-15T08:03:29Z</published>
    <updated>2008-09-22T17:41:39Z</updated>
    <title>Cubescape!</title>
    <link rel="alternate" type="text/html" href="http://mislav.uniqpath.com/log/2008/05/15/cubescape/" />
    <id>http://mislav.caboo.se/log/2008/05/15/cubescape/</id>
    <content type="html">
      &lt;p&gt;&lt;img src=&quot;/page_attachments/0000/0041/cubescape-rails.png&quot; style=&quot;float:right; padding:1px; border:1px solid gray; margin:0 0 1em 1.5em&quot; /&gt; &lt;a href=&quot;http://www.themaninblue.com/experiment/Cubescape/index.php&quot; title=&quot;Cubescape: Your own digital landscape&quot;&gt;Cubescape&lt;/a&gt; is a nifty little toy made by &lt;a href=&quot;http://www.themaninblue.com/&quot;&gt;Cameron Adams&lt;/a&gt; using jQuery. It&amp;#8217;s your own 3D pixel world.&lt;/p&gt;

&lt;p&gt;I liked it so much that &lt;a href=&quot;http://www.themaninblue.com/experiment/Cubescape/load.php?id=689&quot; title=&quot;Ruby on Rails logo in Cubescape&quot;&gt;I&amp;#8217;ve recreated the Rails logo&lt;/a&gt; inside it. Yeah, it sucks, I know :)&lt;br&gt;Make something better!&lt;/p&gt;
      
    </content>
  </entry>

  <entry>
    <author><name>Mislav</name></author>
    <published>2008-05-13T21:15:50Z</published>
    <updated>2008-09-22T17:42:33Z</updated>
    <title>The vanishing design</title>
    <link rel="alternate" type="text/html" href="http://mislav.uniqpath.com/js/the-vanishing-design/" />
    <id>http://mislav.caboo.se/js/the-vanishing-design/</id>
    <content type="html">
      &lt;p&gt;One of the ideas I had for the past few months is writing some JavaScript that would access the stylesheets for the page (via the DOM) and toggle style rules one by one. I never got around to doing that, until I saw &lt;a href=&quot;http://matthewbuchanan.name/&quot;&gt;Matthew Buchanan&lt;/a&gt; beat me to it. With a help of his friend, he wrote &lt;a href=&quot;http://matthewbuchanan.name/post/33504871&quot;&gt;Timelapse CSS&lt;/a&gt;, a script that strips a document of its styles. He also links to a video he recorded of the reverse process: putting the styles back together (which is definitely more cool).&lt;/p&gt;

&lt;p&gt;I haven&amp;#8217;t looked at his code because I still wanted to write my own. Our end results turned out very much alike.&lt;/p&gt;
      &lt;p&gt;My result was the &lt;code&gt;decompose()&lt;/code&gt; function, shown below. It also features a progress indicator in the upper right corner of the page.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This was written for Firefox&lt;/strong&gt; and I still have to test it in Opera and Safari. Don&amp;#8217;t even &lt;em&gt;try&lt;/em&gt; it in Internet Explorer because IE doesn&amp;#8217;t support the standard DOM API (but you already &lt;em&gt;knew&lt;/em&gt; that).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;#&quot; onclick=&quot;decompose(50); return false&quot;&gt;Click here to decompose this page&lt;/a&gt; over the course of 30 seconds. This would usually last 60 seconds, but I&amp;#8217;m telling the function to start at 50%, which skips processing some styles on my site that never got applied to this page in the first place.&lt;/p&gt;

&lt;p&gt;After the script is done, this site&amp;#8217;s design should be bare, black on white. Simply refresh the page to get my nice colors back.&lt;/p&gt;

&lt;p&gt;The full script (&lt;a href=&quot;/js/the-vanishing-design/decompose.js&quot;&gt;download&lt;/a&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;function decompose(start) {
  // reverse forEach for array-like collections
  function $(a,f) {
    for (var i=a.length-1; i&amp;gt;=0; i--) f(a.item(i))
  }

  // array to collect decomposing bits to
  var all = [];

  $(document.styleSheets, function(ss) {
    // decompose only screen stylesheets
    if(!ss.media.length || /\b(all|screen)\b/.test(ss.media.mediaText))
      $(ss.cssRules, function(r) {
        // ignore rules other than style rules
        if(r.type == CSSRule.STYLE_RULE)
          $(r.style, function(p) {
            all.push(function(){ r.style.removeProperty(p) })
          })
      })
  });

  var t, n = all.length, i = (start ? Math.round(n*start/100) : 0)
  if (!n) { alert('No style rules to decompose!'); return }

  // create progress meter
  var p = document.body.appendChild(document.createElement('div'));
  p.style.cssText = 'position:absolute;top:6px;right:8px;color:gray;font:bold 11px sans-serif;';

  // decompose over the course of 60 seconds
  t = setInterval(function(){
    if (i == n) clearInterval(t);
    else {
      all[i++]();
      p.innerHTML = Math.floor(i/n*100) + '%';
    }
  }, 60000/n)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;bookmarklet&quot;&gt;Bookmarklet&lt;/h2&gt;

&lt;p&gt;After the script was working, I wrote a bookmarklet: &lt;a href='javascript:void(function(){var%20s=document.createElement(&quot;script&quot;);s.src=&quot;http://mislav.caboo.se/js/the-vanishing-design/decompose-bookmarklet.js&quot;;document.body.appendChild(s)}())'&gt;Fall apart!&lt;/a&gt; Pull this link to your bookmarks bar and use whenever you want to watch a 60-second show of a website decomposing. I found &lt;a href=&quot;http://cssglobe.com/&quot;&gt;CSS Globe&lt;/a&gt; to be a fun site for running it. &lt;strong&gt;A word of warning, though:&lt;/strong&gt; this doesn&amp;#8217;t seem to work with HTML documents written in XHTML &lt;em&gt;Strict&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;When you run the bookmarklet and think nothing is happening, pay attention to the progress meter in the upper right corner. If it&amp;#8217;s not there, the script never started&amp;#8212;you could try to find an error in your browser&amp;#8217;s JavaScript console. If it&amp;#8217;s a security exception, the document is probably XHTML Strict.&lt;/p&gt;
    </content>
  </entry>

  <entry>
    <author><name>Mislav</name></author>
    <published>2008-03-11T20:30:02Z</published>
    <updated>2008-09-22T17:40:22Z</updated>
    <title>Split feeds: choose your topic</title>
    <link rel="alternate" type="text/html" href="http://mislav.uniqpath.com/log/2008/03/11/choose-your-topic/" />
    <id>http://mislav.caboo.se/log/2008/03/11/choose-your-topic/</id>
    <content type="html">
      &lt;p&gt;You, my readers, are who this site is for. I was proud to break the 500-mark in reader count for my site&amp;#8217;s feed in a little less than 5 months.&lt;/p&gt;

&lt;div style=&quot;margin:1em 0&quot;&gt;
  &lt;img src=&quot;/page_attachments/0000/0015/reader-stats.png&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Still, the statistics reminded me of a growing responsibility I have towards my audience. As much as people who subscribe want to read about &lt;a href=&quot;/js/&quot;&gt;JavaScript&lt;/a&gt;, there are ones who came here interested in &lt;a href=&quot;/rails/&quot;&gt;Ruby programming and Rails&lt;/a&gt;. People are &lt;em&gt;not&lt;/em&gt; necessarily interested in both, so I&amp;#8217;ve split the feeds and &lt;a href=&quot;http://mislav.caboo.se/feeds/&quot; style=&quot;background:url(/images/feed-icon-small.png) no-repeat right 50%; padding-right:20px&quot;&gt;you can now choose among them&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Each of the feeds has &lt;a href=&quot;/log/&quot;&gt;the blog section&lt;/a&gt; mixed in, in which I post random web-related things that might be of interest. The main feed, which most of the people still subscribe to, is unchanged and encompasses every topic on the site.&lt;/p&gt;

&lt;p&gt;Thank you for reading &lt;a href=&quot;http://mislav.caboo.se/&quot;&gt;No Strings Attached&lt;/a&gt;. Stay tuned.&lt;/p&gt;
      
    </content>
  </entry>

  <entry>
    <author><name>Mislav</name></author>
    <published>2008-02-09T04:15:05Z</published>
    <updated>2008-09-22T17:53:14Z</updated>
    <title>Handling JavaScript events on multiple elements</title>
    <link rel="alternate" type="text/html" href="http://mislav.uniqpath.com/js/handling-events-on-elements/" />
    <id>http://mislav.caboo.se/js/handling-events-on-elements/</id>
    <content type="html">
      &lt;p&gt;Implementing proper event handling on your site or application is a &lt;em&gt;design&lt;/em&gt; issue, meaning there are many ways of solving a problem and choosing the right way is a matter of skill and experience. Today I want to talk about handling events on multiple elements because a great deal of JavaScript developers are constantly struggling to get some overcomplicated code working&amp;#8212;usually looping over a set of elements and attaching a handler to each one. When they need to identify which of the targets actually triggered the event, or when they inject new elements as a result of an Ajax request and find out they need to re-apply all the handlers again, they start pulling their hairs out. Let&amp;#8217;s look at an approach where we don&amp;#8217;t need loops; we&amp;#8217;ll simply play with &lt;em&gt;bubbles&lt;/em&gt;. Sometimes this is called &lt;em&gt;event delegation&lt;/em&gt;.&lt;/p&gt;
      &lt;h2 id=&quot;example&quot;&gt;A common need&lt;/h2&gt;

&lt;p&gt;Here is a simple table with nonsense data. Try to select some orders (rows) for processing. Tip: click on whole rows, not just the checkboxes.&lt;/p&gt;

&lt;form action=&quot;.&quot;&gt;
&lt;table id=&quot;mytable&quot; summary=&quot;nonsense data for JavaScript example&quot;&gt;
&lt;thead&gt;&lt;tr&gt;&lt;th&gt;&lt;/th&gt;&lt;th&gt;Date&lt;/th&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Surname&lt;/th&gt;&lt;th&gt;Price&lt;/th&gt;&lt;th&gt;IP Address&lt;/th&gt;&lt;/tr&gt;&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;input name=&quot;order[]&quot; value=&quot;1&quot; type=&quot;checkbox&quot;&gt;&lt;/td&gt;&lt;td&gt;21/01/2006&lt;/td&gt;&lt;td&gt;Neil&lt;/td&gt;&lt;td&gt;Crosby&lt;/td&gt;&lt;td class=&quot;numeric&quot;&gt;$1.96&lt;/td&gt;&lt;td&gt;192.168.1.1&lt;/td&gt;&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;&lt;input name=&quot;order[]&quot; value=&quot;2&quot; type=&quot;checkbox&quot;&gt;&lt;td&gt;01/02/2006&lt;/td&gt;&lt;td&gt;Becca&lt;/td&gt;&lt;td&gt;Courtley&lt;/td&gt;&lt;td class=&quot;numeric&quot;&gt;$23.95&lt;/td&gt;&lt;td&gt;192.167.2.1&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;input name=&quot;order[]&quot; value=&quot;3&quot; type=&quot;checkbox&quot;&gt;&lt;td&gt;17/11/2004&lt;/td&gt;&lt;td&gt;David&lt;/td&gt;&lt;td&gt;Freidman-Jones&lt;/td&gt;&lt;td class=&quot;numeric&quot;&gt;$14.00&lt;/td&gt;&lt;td&gt;192.168.2.1&lt;/td&gt;&lt;/tr&gt;
&lt;tr class=&quot;odd&quot;&gt;&lt;td&gt;&lt;input name=&quot;order[]&quot; value=&quot;4&quot; type=&quot;checkbox&quot;&gt;&lt;td&gt;17/10/2004&lt;/td&gt;&lt;td&gt;Annabel&lt;/td&gt;&lt;td&gt;Tyler&lt;/td&gt;&lt;td class=&quot;numeric&quot;&gt;$104.00&lt;/td&gt;&lt;td&gt;192.168.2.17&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;input name=&quot;order[]&quot; value=&quot;5&quot; type=&quot;checkbox&quot;&gt;&lt;td&gt;17/11/2005&lt;/td&gt;&lt;td&gt;Carl&lt;/td&gt;&lt;td&gt;Conway&lt;/td&gt;&lt;td class=&quot;numeric&quot;&gt;$17.00&lt;/td&gt;&lt;td&gt;192.168.02.13&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;
&lt;/table&gt;

&lt;div class=&quot;actions&quot;&gt;
  &lt;input type=&quot;submit&quot; value=&quot;Process orders&quot;&gt;
&lt;/div&gt;
&lt;/form&gt;

&lt;p&gt;So you&amp;#8217;ve played with it and saw it&amp;#8217;s pretty much basic. But how did we implement it? Many people will say &lt;q&gt;oh, if each row has to be clickable I&amp;#8217;ll just go right ahead and attach a click handler to each of the rows&lt;/q&gt;. That is a complex solution and generally should be avoided. Others will try to be smarter than that and use something like &lt;a href=&quot;http://www.bennolan.com/behaviour/&quot;&gt;Behaviour&lt;/a&gt;, but that&amp;#8217;s just doing the same thing in a nicer way.&lt;/p&gt;

&lt;p&gt;The key is simply intercepting all the click events on the table or &lt;code&gt;TBODY&lt;/code&gt; elements themselves. Most of the events in JavaScript &lt;em&gt;bubble&lt;/em&gt;, which means they propagate up the document tree from the node they originate from. You can handle such events on any element that contains the target of the event; you can also stop its default action, like following a link, or stop it from bubbling. These event methods are called &lt;code&gt;preventDefault()&lt;/code&gt; and &lt;code&gt;stopPropagation()&lt;/code&gt;, respectively. (With the Prototype library you also have the &lt;code&gt;stop()&lt;/code&gt; method that is the combination of both.)&lt;/p&gt;

&lt;p&gt;Here is the complete code for the above example:&lt;/p&gt;

&lt;pre id=&quot;code&quot;&gt;&lt;code class=&quot;javascript&quot;&gt;document.observe(&amp;quot;dom:loaded&amp;quot;, function() {
  when('#mytable tbody', function(table) {
    // we only set one event handler, and that is on the table body
    table.observe('click', function(e) {
      // when an event is handled, descend to from where it's triggered to table row
      var checkbox, row = e.findElement('tr')
      if (row) {
        // find the first input element in the row; that's our checkbox
        var checkbox = row.down('input')
        // toggle the checkbox unless the click event originated on it
        if (e.target != checkbox) checkbox.checked = !checkbox.checked
        // toggle the classname of the row
        row.toggleClassName('selected')
      }
    }).select('input').each(function(input) {
      // add the &amp;quot;selected&amp;quot; class if some inputs are already slected
      if (input.getValue()) input.up(1).addClassName('selected')
    })

    // catch the submit on the form
    table.up('form').observe('submit', function(e) {
      var data = this.serialize(true) // serialize to object
      var selected = data[Object.keys(data).first()]

      if (selected)
        alert('Orders to process: ' + selected.join(', '))
      else
        alert('No orders to process. Please select some')

      // prevent the real submit action taking place in the browser
      e.stop()
    })
  })
})&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pay special attention to &lt;code&gt;e.findElement('tr')&lt;/code&gt;. We don&amp;#8217;t really care where exactly the event originated&amp;#8212;it is most probably on some table cell or even the element inside a cell&amp;#8212;we just want to know what row was it on. Prototype &lt;a href=&quot;http://prototypejs.org/api/event/findElement&quot;&gt;&lt;code&gt;findElement()&lt;/code&gt;&lt;/a&gt; method is very helpful here because it traverses elements upwards from event origin and returns the first one that matches the CSS selector (&lt;code&gt;tr&lt;/code&gt;, in this case).&lt;/p&gt;

&lt;p&gt;When we get a reference to the row, rest is straightforward. We toggle the checkbox programmatically while adding/removing a CSS class on the row for visual feedback.&lt;/p&gt;

&lt;h2 id=&quot;urchin&quot;&gt;Urchin tracker example&lt;/h2&gt;

&lt;p&gt;If you are using Google Analytics on your site, at one point you probably wondered how to track PDF or archive file downloads, or even outgoing (off-site) clicks. There is a solution: Analytics help suggests that you use the &lt;code&gt;urchinTracker()&lt;/code&gt; function with an absolute path as argument. (Note: the name of the method is &lt;code&gt;_trackPageview&lt;/code&gt; if you&amp;#8217;re using &lt;a href=&quot;http://www.google.com/analytics/GATCmigrationguide.pdf&quot;&gt;the new tracking code&lt;/a&gt; from December 2007.)&lt;/p&gt;

&lt;p&gt;They suggest putting the code in an &lt;i&gt;onclick&lt;/i&gt; attribute:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;html error&quot;&gt;&amp;lt;!-- file downloads: --&amp;gt;
&amp;lt;a href=&quot;report.pdf&quot; onclick=&quot;urchinTracker('/downloads/report.pdf')&quot;&amp;gt;awesome report, has pie charts&amp;lt;/a&amp;gt;
&amp;lt;!-- outgoing clicks: --&amp;gt;
&amp;lt;a href=&quot;http://another-site.com&quot; onclick=&quot;urchinTracker('/outgoing/another-site.com')&quot;&amp;gt;visit my sponsor!&amp;lt;/a&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;div style=&quot;width:375px; float:right; margin: 1.5em 0 1.5em 2em; color: #555; font-size: 90%&quot;&gt;
  &lt;img src=&quot;/page_attachments/0000/0007/outgoing.png&quot; alt=&quot;Outgoing links report&quot; style=&quot;display: block; margin: 0 auto .5em auto&quot; /&gt;
  How outgoing links from this site show up in Analytics
&lt;/div&gt;

&lt;p&gt;Hooray, it&amp;#8217;s possible&amp;#8212;but also pretty gross :( First of all, when you switch to the new Analytics tracking code you&amp;#8217;ll have to manually replace each call to the old function. Seconds, if you decide to stop using Analytics and remove the Urchin script, all of these links will generate a JavaScript error on click. But, the worst drawback definitely is: you have to &lt;em&gt;manually add&lt;/em&gt; this to &lt;em&gt;each&lt;/em&gt; link you want tracked.&lt;/p&gt;

&lt;p&gt;Don&amp;#8217;t listen to Analytics help. We are smarter than that. The following script is an unobtrusive, one-time, drop-in solution when you&amp;#8217;re using Prototype (but can also be ported to any other library, easily). Features include:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;fail silently if tracker code isn&amp;#8217;t available (like when Urchin script hasn&amp;#8217;t yet loaded);&lt;/li&gt;
&lt;li&gt;tracking all outgoing URLs;&lt;/li&gt;
&lt;li&gt;tracking all local files with extensions other than &amp;#8216;html&amp;#8217;;&lt;/li&gt;
&lt;li&gt;tracking middle-mouse clicks (that open links in a new tab in some browsers);&lt;/li&gt;
&lt;li&gt;other, custom, rules can easily be added by hand.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Again, pay attention to the usage of &lt;code&gt;findElement()&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;javascript&quot;&gt;var root = 'http://' + window.location.host + '/'

if (window.Prototype) document.observe('mouseup', function(e) {
  if (!urchinTracker) return
  var link = e.findElement('a[href]')
  if (link) {
    var url = null, leftOrMiddle = (e.isLeftClick() || e.isMiddleClick())
    // track outgoing clicks:
    if (!link.href.startsWith(root) &amp;amp;&amp;amp; leftOrMiddle)
      url = '/outgoing/' + link.href.replace(/^http:\/\//, '')
    // track clicks to files with extensions other than &quot;.html&quot;
    else if (/.(\w{2,5})$/.test(link.href) &amp;amp;&amp;amp; RegExp.$1.toLowerCase() != 'html' &amp;amp;&amp;amp; leftOrMiddle)
      url = '/' + link.href.replace(root, '')

    if (url) urchinTracker(url)
  }
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We observe mouse clicks on document level and then test if they originated from link elements; then we apply some simple rules to determine whether we are going to track the click or not. Lastly, we call the tracker function. After executing all the code, default action for the click takes place: the browser follows the link.&lt;/p&gt;

&lt;h2 id=&quot;related-reading&quot;&gt;Related reading&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://dev.opera.com/articles/view/event-capture-explained/&quot;&gt;Event capture explained&lt;/a&gt;&amp;#8212;a good primer on bubbling and event capture on &lt;a href=&quot;http://dev.opera.com/&quot;&gt;Opera Developer Community&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.danwebb.net/2008/2/8/event-delegation-made-easy-in-jquery&quot;&gt;Event Delegation Made Easy In jQuery&lt;/a&gt; by &lt;a href=&quot;http://www.danwebb.net/&quot; rel=&quot;acquaintance&quot;&gt;Dan Webb&lt;/a&gt;;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://icant.co.uk/sandbox/eventdelegation/&quot;&gt;Event Delegation versus Event Handling&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
    </content>
  </entry>

  <entry>
    <author><name>Mislav</name></author>
    <published>2008-01-28T16:14:09Z</published>
    <updated>2008-09-22T17:52:21Z</updated>
    <title>Prototype 1.6 cheatsheet</title>
    <link rel="alternate" type="text/html" href="http://mislav.uniqpath.com/js/prototype-cheatsheet/" />
    <id>http://mislav.caboo.se/js/prototype-cheatsheet/</id>
    <content type="html">
      &lt;p&gt;It was a good week for Prototype lovers! Right along the &lt;a href=&quot;http://prototypejs.org/2008/1/25/prototype-1-6-0-2-bug-fixes-performance-improvements-and-security&quot;&gt;Prototype 1.6 security and performance release&lt;/a&gt;, &lt;a rel=&quot;contact&quot; href=&quot;http://thinkweb2.com/projects/prototype/&quot;&gt;Kangax&lt;/a&gt; (a very active community member) released an awesome, full-page, beautiful &lt;a href=&quot;http://thinkweb2.com/projects/prototype/prototype-1602-cheat-sheet/&quot;&gt;Prototype cheatsheet&lt;/a&gt; covering the very same release.&lt;/p&gt;

&lt;div style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;http://thinkweb2.com/projects/prototype/prototype-1602-cheat-sheet/&quot;&gt;&lt;img src=&quot;/page_attachments/0000/0005/prototype-cheatsheet.gif&quot; alt=&quot;A preview of the Prototype cheatsheet&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;p&gt;In the bottom corner there is an incredibly useful diagram for those not yet familiar with dimensions/offsets API of elements and viewport. So, &lt;a href=&quot;http://attic.scripteka.com/prototype_cheatsheet_1.6.0.2.pdf&quot;&gt;download the Prototype cheatsheet&lt;/a&gt;, print it, hang it on your wall. I know I will.&lt;/p&gt;
      
    </content>
  </entry>



</feed>
